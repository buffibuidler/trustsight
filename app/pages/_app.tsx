import "@styles/globals.css";
import type { AppProps } from "next/app";
import {
  EthereumClient,
  modalConnectors,
  walletConnectProvider,
} from "@web3modal/ethereum";
import { Web3Modal } from "@web3modal/react";
import { mainnet, polygon, optimism, optimismGoerli } from "wagmi/chains";
import { alchemyProvider } from "wagmi/providers/alchemy";
import { publicProvider } from "wagmi/providers/public";

import { useEffect, useState } from "react";
import { ChakraProvider, extendTheme } from "@chakra-ui/react";
import { configureChains, createClient, WagmiConfig } from "wagmi";
import Head from "next/head";
import Navbar from "@components/Navbar";

import { selectAnatomy } from "@chakra-ui/anatomy";
import { createMultiStyleConfigHelpers } from "@chakra-ui/react";
import Script from "next/script";

const { chains } = configureChains(
  [optimismGoerli],
  [
    alchemyProvider({ apiKey: process.env.NEXT_PUBLIC_ALCHEMY_API_KEY } as any),
    publicProvider(),
  ]
);

const { provider } = configureChains(chains, [
  walletConnectProvider({ projectId: "e342e43e2ebcc35c13bb88a6e0da25a2" }),
]);

const wagmiClient = createClient({
  autoConnect: true,
  connectors: modalConnectors({
    projectId: "e342e43e2ebcc35c13bb88a6e0da25a2",
    version: "1", // or "2"
    appName: "trustsight",
    chains,
  }),
  provider,
});

const ethereumClient = new EthereumClient(wagmiClient, chains);

const { definePartsStyle, defineMultiStyleConfig } =
  createMultiStyleConfigHelpers(selectAnatomy.keys);

const custom = definePartsStyle({
  field: {
    background: "blue.100",
    borderRadius: "20px !important",
    fontWeight: "700 !important",
  },
});

const selectTheme = defineMultiStyleConfig({
  variants: { custom },
});

declare global {
  interface Window {
    Cypher?: any;
  }
}

const theme = extendTheme({
  styles: {
    global: {
      "*": {
        fontFamily: "Plus Jakarta Sans",
        color: "black",
      },
      a: {
        _hover: {
          textDecoration: "none !important",
        },
      },
    },
    components: {
      Select: selectTheme,
    },
  },
});

export default function App({ Component, pageProps, router }: AppProps) {
  const [mounted, setMounted] = useState(false);

  useEffect(() => setMounted(true), []);
  if (!mounted) return null;

  return (
    <>
      <div>
        <Script src="https://public.cypherd.io/js/onboardingsdk.js"></Script>
      </div>
      <WagmiConfig client={wagmiClient}>
        <ChakraProvider theme={theme}>
          <Head>
            <title>TrustSight: Enabling Trust in Web3</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <Navbar />
          <Component {...pageProps} key={router.route} />
        </ChakraProvider>
      </WagmiConfig>

      <Web3Modal
        projectId="e342e43e2ebcc35c13bb88a6e0da25a2"
        ethereumClient={ethereumClient}
      />
    </>
  );
}
