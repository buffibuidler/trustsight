import "@styles/globals.css";
import type { AppProps } from "next/app";

import {
  getDefaultWallets,
  RainbowKitProvider,
  Theme,
  darkTheme,
} from "@rainbow-me/rainbowkit";
import "@rainbow-me/rainbowkit/styles.css";
import { mainnet, polygon, optimism, arbitrum } from "wagmi/chains";
import { alchemyProvider } from "wagmi/providers/alchemy";
import { publicProvider } from "wagmi/providers/public";

import { useEffect, useState } from "react";
import { ChakraProvider, extendTheme } from "@chakra-ui/react";
import { configureChains, createClient, Chain, WagmiConfig } from "wagmi";
import Head from "next/head";
import Navbar from "@components/Navbar";
import merge from "lodash.merge";

const mantle = {
  id: 5001,
  name: "Mantle",
  network: "mantle",
  nativeCurrency: {
    decimals: 18,
    name: "mantle",
    symbol: "BIT",
  },
  rpcUrls: {
    public: { http: ["https://rpc.testnet.mantle.xyz	"] },
    default: { http: ["https://rpc.testnet.mantle.xyz	"] },
  },
  blockExplorers: {
    etherscan: {
      name: "Wadsley",
      url: "https://explorer.testnet.mantle.xyz/",
    },
    default: { name: "Wadsley", url: "https://explorer.testnet.mantle.xyz/" },
  },
} as const satisfies Chain;

const { chains, provider } = configureChains(
  [mainnet, polygon, optimism, arbitrum, mantle],
  [alchemyProvider({ apiKey: process.env.ALCHEMY_ID } as any), publicProvider()]
);

const { connectors } = getDefaultWallets({
  appName: "My RainbowKit App",
  chains,
});

const wagmiClient = createClient({
  autoConnect: true,
  connectors,
  provider,
});

const theme = extendTheme({
  styles: {
    global: {
      "*": {
        fontFamily: "Inter",
        color: "white",
      },
      a: {
        _hover: {
          textDecoration: "none !important",
        },
      },
    },
  },
});

/* RainbowKit Theming */
const customTheme = merge(darkTheme(), {
  colors: {
    accentColor: "#2A46EB",
  },
} as Theme);

export default function App({ Component, pageProps, router }: AppProps) {
  const [mounted, setMounted] = useState(false);

  useEffect(() => setMounted(true), []);
  if (!mounted) return null;

  return (
    <WagmiConfig client={wagmiClient}>
      <RainbowKitProvider chains={chains} theme={customTheme}>
        <ChakraProvider theme={theme}>
          <Head>
            <title>TrustSight: Enabling Trust in Web3</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <Navbar />
          <Component {...pageProps} key={router.route} />
        </ChakraProvider>
      </RainbowKitProvider>
    </WagmiConfig>
  );
}
